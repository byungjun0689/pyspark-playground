[MULTILINE_PARSER]
    name          multiline-regex-test
    type          regex
    flush_timeout 1000
    # Regex rules for multiline parsing
    # ---------------------------------
    #
    # configuration hints:
    #
    #  - first state always has the name: start_state
    #  - every field in the rule must be inside double quotes
    #
    # rules   |   state name   | regex pattern                   | next state name
    # --------|----------------|--------------------------------------------------
    #rule         "start_state"   "/^time\:\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}\+\d{4}\s{2}filename\:\w+\.py\:\d+\s{2}levelname\:\w+\s{2}err_message\:.*$/"  "cont"
    rule         "start_state"   "/^time\:\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}\+\d{4}\s+filename\:\w+\.py\:\d+\s+levelname\:\w+\s+err_message\:.*$/"  "cont"
    #rule         "cont"          "/^\s*(File|at)?.*/"                     "cont"
    rule         "cont"          "/^(?!time\:\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}\+\d{4}).*/"  "cont"

[PARSER]
    Name named-capture-test
    Format regex
    Regex /^time\:(?<date>\d+\-\d+\-\d+)T(?<time>\d+:\d+:\d+\.\d+\+0000)\s{2}filename\:(?<filename>\w+\.py)\:\d+\s{2}levelname\:(?<level>\w+)\s{2}err_message\:(?<message>.*)/m
